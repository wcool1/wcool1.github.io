<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法题详解</title>
    <link href="/2024/10/20/%E7%AE%97%E6%B3%95%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/10/20/%E7%AE%97%E6%B3%95%E9%A2%98%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章讲述解决学习二分法过程中解决的一些问题，以及感悟；</p></blockquote><span id="more"></span><h2 id="leetcode-33-搜索旋转排序数组"><a href="#leetcode-33-搜索旋转排序数组" class="headerlink" title="leetcode[33]搜索旋转排序数组"></a>leetcode[33]搜索旋转排序数组</h2><ul><li><p>题目描述：给你旋转后的数组 nums（原本单调递增）和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p></li><li><p>示例 ：</p><pre><code class="hljs">  输入：nums = [4,5,6,7,0,1,2], target = 0  输出：4</code></pre></li><li><p>要求：时间复杂度为 O(log n) </p></li><li><p>思路：</p><ul><li>其实看到O(log n)就应该下意识想到二分法;基本思路是先用二分法找到旋转点，然后再用二分法找到目标值；</li></ul></li><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">binarySearch</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-comment">// 初始化双闭区间 [0, n-1] ，即 i, j 分别指向数组首元素、尾元素</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, <br>    j = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 循环，当搜索区间为空时跳出（当 i &gt; j 时为空）</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-comment">// 计算中点索引 m ，使用 parseInt() 向下取整</span><br>        <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">parseInt</span>(i + (j - i) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (nums[m] &lt; target)<br>            <span class="hljs-comment">// 此情况说明 target 在区间 [m+1, j] 中</span><br>            i = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] &gt; target)<br>            <span class="hljs-comment">// 此情况说明 target 在区间 [i, m-1] 中</span><br>            j = m - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> m; <span class="hljs-comment">// 找到目标元素，返回其索引</span><br>    &#125;<br>    <span class="hljs-comment">// 未找到目标元素，返回 -1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//找到x之后，寻找target</span><br><span class="hljs-keyword">var</span> second_half=<span class="hljs-keyword">function</span>(<span class="hljs-params">nums,x,target</span>)&#123;<br>    <span class="hljs-comment">//判断target是否在元素大小区间内，如不，直接返回-1；</span><br>    <span class="hljs-keyword">if</span>(nums[x]&lt;target || nums[x+<span class="hljs-number">1</span>]&gt;target)&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-comment">//在区间内，与nums[0]比较，如果target大于其则必然在左部分]0,x]；</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>]&lt;=target)&#123;<br>        <span class="hljs-comment">//左部分二分查找target</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-title function_">binarySearch</span>(nums.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,x+<span class="hljs-number">1</span>),target)<br>    <span class="hljs-comment">//否则在右部分[x+1,nums.length-1]</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">let</span> result=<span class="hljs-title function_">binarySearch</span>(nums.<span class="hljs-title function_">slice</span>(x+<span class="hljs-number">1</span>,nums.<span class="hljs-property">length</span>),target)<br>        <span class="hljs-comment">//分右部分存在与否两种情况</span><br>        <span class="hljs-keyword">if</span> (result===-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> result+x+<span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> search = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-comment">//通过两次176左右/196的两个失败案例[1] 1和 [1,3] 3 补充如下两次特殊情况</span><br>    <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>]==target)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(nums[nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]==target)&#123;<br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> left=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> right=nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> x=<span class="hljs-number">0</span>   <span class="hljs-comment">//最大元素的下标x,x+1就是最小元素的下标</span><br><br>    <span class="hljs-comment">//根据单调性判断K处,只有两个元素会出现异常不满足小于右边或大于左边；下标分别为x,x+1</span><br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        <span class="hljs-keyword">let</span> mid=(left+right)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-comment">//最大元素的下标x</span><br>        <span class="hljs-keyword">if</span>(nums[mid]&gt;nums[mid+<span class="hljs-number">1</span>] ||nums[mid]&lt;nums[mid-<span class="hljs-number">1</span>])&#123;<br>            x=nums[mid]&gt;nums[mid+<span class="hljs-number">1</span>]?<span class="hljs-attr">mid</span>:mid-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">second_half</span>(nums,x,target)    <br>        <span class="hljs-comment">//mid在右部分        </span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;nums[<span class="hljs-number">0</span>])&#123;<br>            right=mid-<span class="hljs-number">1</span><br>        <span class="hljs-comment">//mid在左部分</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            left=mid+<span class="hljs-number">1</span><br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//根据不通过的案列[1,3,5]  3 answer:-1;提醒我应该先判断词列表是否翻转过；</span><br>    <span class="hljs-comment">//如果上个循环结束还没有得出结果说明这个列表可能没有翻转过（也可以理解为在0出翻转，为了节约时间，我们把这个操作移到前面）</span><br>    <span class="hljs-comment">//但是问题在于似乎无法在时间复杂度为logn的前提下判断一个数组是单调递增的，所以只能放在while循环后面，说明词列表没有反转</span><br>    <span class="hljs-keyword">return</span>   <span class="hljs-title function_">binarySearch</span>(nums,target)<br>    <br>&#125;;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="二分总结"><a href="#二分总结" class="headerlink" title="二分总结"></a>二分总结</h2><ul><li>特征：二分法的使用场景，其实比较受限，最明显的特点是：</li></ul><ol><li>绝大情况，查找目标具有单调性质（单调递增、单调递减）：整个数组或者类似旋转数组其分成两部分具有单调性；</li><li>有上下边界，并且最好能够通过index下标访问元素</li><li>要求时间复杂度为Logn</li></ol><p><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/solutions/996781/cong-ji-ben-de-er-fen-fa-shuo-qi-ru-he-a-hof5/">参考</a></p><ul><li>基础模版：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> left = start<br><span class="hljs-keyword">let</span> right = end<br><span class="hljs-keyword">let</span> mid<br><span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    mid = (left + right) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> (array[mid] === target) &#123;<br>        <span class="hljs-keyword">return</span> result <span class="hljs-comment">//或者 break </span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (array[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (array[mid] &gt; target) &#123;<br>        right = mid - <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>create my blog</title>
    <link href="/2024/09/23/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/09/23/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章讲述搭建博客的原因、过程以及使用hexo的技巧</p></blockquote><span id="more"></span><h2 id="为什么搭建博客？"><a href="#为什么搭建博客？" class="headerlink" title="为什么搭建博客？"></a>为什么搭建博客？</h2><p>学习的步骤可以分为输入、处理、输出三步，每一步都很重要，如果你学完某些内容却没有输出任何东西，那么它带给你受益是微乎其微的，随着时间的流逝，趋近于0；而写博客是一个非常方便的输出方式，写作的过程和内容也能体现出一个人的思考以及体会，更能帮助其更深一步理解所学知识；</p><p>对于一名计算机类专业的学生，我们接受的输入本身就大得多（相较大部分专业）；输出的重要性不言而喻，我下了面从5点论述，为什么写作对于程序员非常重要。</p><ol><li><p>写作&#x3D;协作，良好的写作能力促进人与人之间的交流，让整个团队的知识成果以文档的形式沉淀下来，使得项目更好更久地运行下去以及拓展；在大公司中越是职位越高的人越能出口成章流畅输出观点，他们的影响力也越大</p><div align='center'><img src="./image/创建博客/1730185605407.png" width="300" height="200" ></div></li><li><p>写作是学习的催化剂：写作不仅是向别人解释某个概念，它还能帮助我们更深入地思考问题，让思路更清晰；一旦养成写作的习惯，就会慢慢形成正循环。</p><div align='center'><img src="./image/创建博客/1730185650216.png" width="300" height="200" ></div></li><li><p>温故而知新：写作需要大量的阅读的资料作为支撑，所以写作也会让你更精确，更注重细节和刨根问底，帮助你复盘学习过程，并揭示看似理解了实际上却并不理解的知识，当你意识到当前的某些知识是在模糊不稳定的基础之上时，你就会开始寻找缺失的部分，获得更深的理解；</p></li><li><p>写代码和写文章有很多共同之处，顶尖的工程师往往也是好的文章作者，他们的文章和代码一样有逻辑性、行文流畅、优雅且工整;</p><center><img src="./image/创建博客/1730190710172.png" width="300" height='200' ><img src="./image/创建博客/1730190889437.png" width="300" height='200' ></center></li><li><p>博客是写文章的一种很好的载体，坚持下去，无论有多少人看，收益最大的人一定是自己；</p></li></ol><ul><li><a href="https://www.bilibili.com/video/BV1eb421e7Ui/?share_source=copy_web&vd_source=7f150cf40745ac06f41469483a60fc41">参考</a></li></ul><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><ul><li>使用hexo搭建博客；具体参考<ul><li><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></li><li><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">https://blog.csdn.net/cat_bayi/article/details/128725230</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide">https://fluid-dev.github.io/hexo-fluid-docs/guide</a></li></ul></li></ul><ol><li><p>关联github page的仓存到本地</p></li><li><p>安装hexo</p></li><li><p>配置主题</p><ol><li>选择的是这个：<a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file">https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file</a></li></ol></li><li><p>安装hexo-deployer-git插件实现自动远程部署：npm install hexo-deployer-git –save</p></li><li><p>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><pre><code class="hljs">  deploy:     type: git     repository: git@github.com:用户名/用户名.github.io.git     branch: main</code></pre></li><li><p>关联域名： <a href="https://github.com/wcool1/wcool1.github.io/settings/pages">打开github上博客仓库的设置</a>: 重新设置Custom domain:[<a href="http://www.tolsz];并开启https;(github给的权益)">www.tolsz];并开启https;(github给的权益)</a></p><ul><li>为什么github pages部署hexo之后每次hexo g -d后关联的域名都会失效,每次都要在github上手动设置吗;<ul><li><a href="https://whybee.blog.csdn.net/article/details/140328361?spm=1001.2014.3001.5502">参考链接</a>：</li></ul><ol><li>不需要，只需要在github的该仓库中创建一个CNAME文件并将域名写入即可；等个1min就好了；但这样再下一次推送后CNAME文件又会失踪；原因如下</li><li>偶然中发现，刚开始还未部署hexo时本地仓库整个文件夹都和远程git仓库是关联同步的，包括CNAME和README.md都是同步的；但是部署hexo之后，远程仓库中只含有博客项目下的.deploy_git下的文件夹；每次更新使用hexo g 会根据本地内容（source中的文件）生成相应页面到pulic中， 然后hexo d进行部署时，会将public中的文件同步deploy_git下同时推送到远程的github仓库；即source下所有的文件内容对应public;比如source&#x2F;A hexo -g之后就会在public&#x2F;A 生成相应内容；</li><li>这也是为什么1中操作下CNAME文件会消失，因为public下没有CNAME文件，所以推送到远端时，自然也没有；解决办法就是在source文件夹下创建CNAME文件添加不含http前缀的域名，然后hexo g -d即可；</li><li>由于dns缓存的原因，每次更新并部署后需要过一会（20s-60s）才能看到新的内容，样式与本地的markdown看到的几乎一样；</li></ol></li></ul></li><li><p>常用命令：</p><pre><code class="hljs">  hexo new &quot;name&quot;       # 新建文章  hexo new page &quot;name&quot;  # 新建页面  hexo g                # 生成页面  hexo d                # 部署  hexo g -d             # 生成页面并部署  hexo s                # 本地预览  hexo clean            # 每次更新前使用：清除缓存文件: 删除 public 文件夹、db.json 文件以及 _config.yml 中配置的 public_dir 目录下的所有文件。确保生成干净的网站文件: 清除缓存后，下次运行 hexo generate 命令时，会重新生成所有网站文件，避免旧文件的影响。这样会导致你直接在Public下对文件做的修改比如更换Img、html等等都会被撤销；因此，强调修改任何东西都是在source、配置文件下才是正确稳妥的；  hexo help             # 帮助</code></pre></li><li><p>基本操作</p><ol><li><p>删除&#x2F;删除页面：直接在本地source &#x2F; _post 文件夹中删除&#x2F;修改相应文件然后hexo clean; hexo g -d即可</p></li><li><p>图片操作：</p><ol><li>插入图片时需要考虑其大小以及排版在此博客系统上的效果，一般使用html标签调整，设置width&#x2F;height为百分比；eg:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;25%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;25%&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>实际上，hexo渲染一篇post的工作流程是：</p><pre><code class="hljs">  拿到一个markdown文件，  根据这个文件的layout类型，  进行样式排版，生成html文件，  最终展示到网页端。</code></pre></li><li><p>发布一篇博客的操作流程</p><ol><li>hexo new ‘title’</li><li>hexo clean</li><li>hexo g -d</li></ol></li></ol></li></ol><h2 id="hexo使用技巧"><a href="#hexo使用技巧" class="headerlink" title="hexo使用技巧"></a>hexo使用技巧</h2><ol><li>设置文章摘要和标签操作举例如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">hello</span> <span class="hljs-string">hexo</span> <span class="hljs-string">markdown</span><br><span class="hljs-attr">date:</span> <br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">我是短小精悍的文章摘要(๑•̀ㅂ•́)</span> <span class="hljs-string">✧</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-string">--&gt;</span><br><br><span class="hljs-string">紧接着文章摘要的正文内容</span><br><br><br></code></pre></td></tr></table></figure></li><li>资源引用：除了url的绝对引用外，相对引用可以使用 Hexo 提供的资源文件夹功能:使用文本编辑器打开站点根目录下的 _ config.yml 文件，将 post_asset_folder 值设置为 true。Hexo 将会在我们每一次通过 hexo new title 命令创建新文章时自动创建一个同名文件夹，于是我们便可以将文章中所引用的相关资源比如截图放到这个同名文件夹下，然后通过相对路径引用；不针对封面等与文章内容无关的资源；<ol><li>强调一下hexo g时，只会将source目录下的img文件夹、_posts下的new出来的md文件以及资源引用开启后下的同名文件夹下的资源文件复制到public下，其他的文件不会复制到public下；因此直接复制图片粘贴到md中的资源图片，vscode会默认在当前目录下创建一个img&#x2F;{title}文件夹用以存放截图，但是此文件夹不会被hexo g复制到public下，因此需要手动将其复制粘贴一份到资源引用功能开启后的同名（title）文件夹下，然后hexo g -d即可；</li></ol></li><li>分类与标签：<ol><li>二者区别：分类具有顺序性和层次性而标签没有顺序和层次；可忽略不计</li><li>在scaffolds&#x2F;post.md设置默认的文章模板如下，生成之后再加入分类&#x2F;标签即可，分类比较好用：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">类别</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ol></li><li>自定制、美化博客<ol><li>参考：<ol><li><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/</a></li><li><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">https://blog.csdn.net/weixin_51545953/article/details/128499341</a></li></ol></li><li>配置：包括所有图片、导航栏的title、标题等等都在_conflg.主题.yml中设置,其优先级最高,然后考虑_config.yml;</li><li>修改banner图：<ol><li>在网上查找免费开源的风景图片并下载下来（避免版权纠纷）推荐几个免费开源的图片网站<ol><li><a href="https://pixabay.com/">https://pixabay.com/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li><li><a href="https://www.pexels.com/">https://www.pexels.com/</a></li></ol></li><li>不知为何在配置中修改默认banner_img的属性不生效，但是可以分步设置各个分页的banner图，<a href="https://s81679.github.io/2020/02/25/hexo-theme-fluid/#%E4%B8%BB%E9%A0%81-Banner-%E5%A4%A7%E5%9C%96">参考</a><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 首页</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">    banner_img:</span> <span class="hljs-keyword">/img/</span>banner.jpg  <span class="hljs-meta"># 首页 Banner 头图，以下相同</span><br><span class="hljs-symbol">    banner_img_height:</span> <span class="hljs-number">100</span>  <span class="hljs-meta"># 头图高度，屏幕百分比，available: 0 - 100</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 文章頁</span><br><span class="hljs-meta"># Archive Page</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">archive:</span><br><span class="hljs-symbol">    banner_img:</span> <span class="hljs-keyword">/img/</span>articles.jpg<br><span class="hljs-symbol">    banner_img_height:</span> <span class="hljs-number">80</span>  <span class="hljs-meta"># available: 0 - 100</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 分類頁</span><br><span class="hljs-meta"># Categories Page</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">category:</span><br><span class="hljs-symbol">    banner_img:</span> <span class="hljs-keyword">/img/</span>categories.jpg<br><span class="hljs-symbol">    banner_img_height:</span> <span class="hljs-number">80</span>  <span class="hljs-meta"># available: 0 - 100</span><br></code></pre></td></tr></table></figure></li></ol></li><li>设置文章在首页中的封面图：<ol><li>设置模版scaffolds&#x2F;post中添加index_img: &#x2F;img&#x2F;cover&#x2F;<code>&#123;&#123; title &#125;&#125;</code>.png；</li><li>在source&#x2F;img下创建cover文件夹,将new的文章的封面移动到其中，并改为{title}.png</li><li>hexo clean ;hexo g -d</li></ol></li><li>同理，banner_img: &#x2F;img&#x2F;cover&#x2F;<code>&#123;&#123; title &#125;&#125; </code>.png设置文章的banner图</li></ol></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
